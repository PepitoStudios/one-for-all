buildscript {

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath(BuildPlugins.android)
        classpath(BuildPlugins.kotlin)
        classpath(BuildPlugins.crashlytics)
        classpath(BuildPlugins.firebasePerf)
        classpath(BuildPlugins.hilt)
        classpath(BuildPlugins.googleServices)
        classpath("org.jacoco:org.jacoco.core:0.8.8")
    }
}

subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency {
                if ("org.jacoco" == requested.group) {
                    useVersion("0.8.8")
                }
            }
        }
    }
}

plugins {
    id("com.android.application") version Versions.gradle apply false
    id("com.android.library") version Versions.gradle apply false
    id("com.google.gms.google-services") version Versions.googleServices apply false
    id("org.jetbrains.kotlin.android") version Versions.kotlin apply false
    id("org.jetbrains.kotlin.jvm") version Versions.kotlin apply false
    id("com.github.ben-manes.versions") version "0.42.0"
    id("jacoco")
    id("org.sonarqube") version "3.3"
    // id 'org.jmailen.kotlinter' version "3.10.0" apply false
}

val androidCoverageExclusion = arrayOf<String>(
    "**/databinding/**/*.*",
    "**/android/databinding/*Binding.*",
    "**/BR.*",
    "**/R.*",
    "**/R$*.*",
    "**/BuildConfig.*",
    "**/Manifest*.*",
    "**/*Module_*Factory.*"
)

val androidCodeExclusion = arrayOf<String>(
    "**/databinding/**/*.*",
    "**/android/databinding/*Binding.*",
    "**/BR.*",
    "**/R.*",
    "**/R$*.*",
    "**/BuildConfig.*",
    "**/Manifest*.*",
    "**/mockserver/**"
)

sonarqube {
    properties {
        property("sonar.projectKey", SonarCloud.projectKey)
        property("sonar.organization", SonarCloud.organization)
        property("sonar.projectName", SonarCloud.projectName)
        property("sonar.host.url", SonarCloud.host)
        property("sonar.java.coveragePlugin", "jacoco")
        property(
            "sonar.coverage.jacoco.xmlReportPaths",
            "${project.layout.buildDirectory}/reports/code-report/report.xml"
        )
        property("sonar.coverage.exclusions", androidCoverageExclusion)
        property("sonar.exclusions", androidCodeExclusion)
    }
}

tasks.register("clean", Delete::class) {
    delete(rootProject.layout.buildDirectory)
}

tasks.withType<Test> {
    configure<JacocoTaskExtension> {
        isIncludeNoLocationClasses = true
        excludes = listOf("jdk.internal.*")
    }
}
fun classDirectoriesTree(subprojects: List<Project>): List<File> {
    val files = mutableListOf<File>()

    subprojects.forEach {
        val fileTree = fileTree(it.layout.buildDirectory) {
            include(
                "**/classes/**/main/**",
                "**/intermediates/classes/debug/**",
                "**/intermediates/javac/debug/*/classes/**", // Android Gradle Plugin 3.2.x support.
                "**/tmp/kotlin-classes/debug/**"
            )
            exclude(
                "android/databinding/**/*.class",
                "**/android/databinding/*Binding.class",
                "**/android/databinding/*",
                "**/androidx/databinding/*",
                "**/BR.*",
                // android
                "**/R.class",
                "**/R$*.class",
                "**/BuildConfig.*",
                "**/Manifest*.*",
                "**/*Test*.*",
                "android/**/*.*",
                // dagger
                "**/*_MembersInjector.class",
                "**/Dagger*Component.class",
                "**/Dagger*Component\$Builder.class",
                "**/Dagger*Subcomponent*.class",
                "**/*Subcomponent\$Builder.class",
                "**/*Module_*Factory.class",
                "**/di/module/*",
                "**/*_Factory*.*",
                "**/*Module*.*",
                "**/*Dagger*.*",
                "**/*Hilt*.*",
                // kotlin
                "**/*MapperImpl*.*",
                "**/*\$ViewInjector*.*",
                "**/*\$ViewBinder*.*",
                "**/BuildConfig.*",
                "**/*Component*.*",
                "**/*BR*.*",
                "**/Manifest*.*",
                "**/*\$Lambda$*.*",
                "**/*Companion*.*",
                "**/*Module*.*",
                "**/*Dagger*.*",
                "**/*Hilt*.*",
                "**/*MembersInjector*.*",
                "**/*_MembersInjector.class",
                "**/*_Factory*.*",
                "**/*_Provide*Factory*.*",
                "**/*Extensions*.*",
                // sealed and data classes
                "**/*$Result.*",
                "**/*$Result$*.*",
                // adapters generated by moshi
                "**/*JsonAdapter.*"
            )
        }
        files.addAll(fileTree.files)
    }

    return files
}

fun sourceDirectoriesTree(subprojects: List<Project>): ConfigurableFileCollection {
    val files: ConfigurableFileCollection = project.files(
        subprojects.map {
            it.file("src/main/java")
        }
    )
    return files
}

fun executionDataTree(subprojects: List<Project>): List<File> {
    val files = mutableListOf<File>()
    subprojects.forEach {
        val fileTree = fileTree(it.layout.buildDirectory) {
            include(
                "outputs/code_coverage/**/*.ec",
                "outputs/unit_test_code_coverage/**/testDebugUnitTest.exec"
            )
        }
        files.addAll(fileTree.files)
    }
    return files
}

fun JacocoReportsContainer.reports() {
    csv.required.set(false)
    xml.apply {
        required.set(true)
        outputLocation.set(file("$layout.buildDirectory.buildDirectory/reports/code-report/report.xml"))
    }
    html.apply {
        required.set(true)
        outputLocation.set(file("$layout.buildDirectory.buildDirectory/reports/code-report/html"))
    }
}

fun JacocoReport.setDirectories(subprojects: List<Project>) {
    sourceDirectories.setFrom(sourceDirectoriesTree(subprojects))
    classDirectories.setFrom(classDirectoriesTree(subprojects))
    executionData.setFrom(executionDataTree(subprojects))
}

fun JacocoCoverageVerification.setDirectories(subprojects: List<Project>) {
    sourceDirectories.setFrom(sourceDirectoriesTree(subprojects))
    classDirectories.setFrom(classDirectoriesTree(subprojects))
    executionData.setFrom(executionDataTree(subprojects))
}

val jacocoGroup = "verification"
tasks.register<JacocoReport>("jacocoTestReport") {
    group = jacocoGroup
    description = "Code coverage report for both Android and Unit tests."
    reports {
        reports()
    }

    setDirectories(subprojects.filter { it.name != "test" })
}

tasks.withType(Test::class.java) {
    // Whether or not classes without source location should be instrumented
    configure<JacocoTaskExtension> {
        isIncludeNoLocationClasses = true
        excludes = listOf("jdk.internal.*")
    }
}

val minimumCoverage = "0.8".toBigDecimal()
tasks.register<JacocoCoverageVerification>("jacocoCoverageVerification") {
    group = jacocoGroup
    description = "Code coverage verification for Android both Android and Unit tests."
    dependsOn("testDebugUnitTest")
    dependsOn("createDebugCoverageReport")
    violationRules {
        rule {
            limit {
                minimum = minimumCoverage
            }
        }
        rule {
            element = "CLASS"
            excludes = listOf(
                "**.FactorFacade.Builder",
                "**.ServiceFacade.Builder",
                "**.ChallengeFacade.Builder",
                "**.Task"
            )
            limit {
                minimum = minimumCoverage
            }
        }
    }
    // setDirectories(subprojects)
}
